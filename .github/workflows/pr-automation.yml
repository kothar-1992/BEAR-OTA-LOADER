name: Pull Request Automation

on:
  push:
    branches:
      - 'feature/*'
      - 'bugfix/*'
      - 'hotfix/*'
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main, develop ]

jobs:
  auto-pr:
    name: Auto Create Pull Request
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/feature/')

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Extract Branch Info
      id: branch_info
      run: |
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        FEATURE_NAME=${BRANCH_NAME#feature/}
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        echo "feature_name=$FEATURE_NAME" >> $GITHUB_OUTPUT

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ steps.branch_info.outputs.branch_name }}
        base: main
        title: "🚀 Feature: ${{ steps.branch_info.outputs.feature_name }}"
        body: |
          ## Feature: ${{ steps.branch_info.outputs.feature_name }}
          
          ### Description
          Auto-generated pull request for feature branch: `${{ steps.branch_info.outputs.branch_name }}`
          
          ### Changes
          - [ ] Feature implementation completed
          - [ ] Tests added/updated
          - [ ] Documentation updated
          - [ ] Build verification passed
          
          ### Checklist
          - [ ] Code follows project style guidelines
          - [ ] Self-review completed
          - [ ] No breaking changes introduced
          - [ ] APK size impact assessed
          
          ### Testing
          - [ ] Manual testing completed
          - [ ] Automated tests passing
          - [ ] Performance impact evaluated
          
          ---
          *This PR was automatically created by GitHub Actions*
        draft: false

  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Install NDK
      run: |
        echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "ndk;25.1.8937393"
        echo "ANDROID_NDK_HOME=$ANDROID_HOME/ndk/25.1.8937393" >> $GITHUB_ENV

    - name: Cache Gradle Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

    - name: Make Gradlew Executable
      run: chmod +x ./gradlew

    - name: Validate Build Configuration
      run: ./gradlew tasks --all

    - name: Build and Test
      run: |
        ./gradlew clean
        ./gradlew assembleDebug
        ./gradlew testDebugUnitTest

    - name: Check APK Size
      run: |
        APK_SIZE=$(stat -c%s app/build/outputs/apk/debug/*.apk)
        MAX_SIZE=$((20 * 1024 * 1024))  # 20MB limit
        echo "APK Size: $APK_SIZE bytes"
        echo "Max Size: $MAX_SIZE bytes"
        if [ $APK_SIZE -gt $MAX_SIZE ]; then
          echo "❌ APK size exceeds 20MB limit!"
          exit 1
        else
          echo "✅ APK size within limits"
        fi

    - name: Generate PR Report
      run: |
        echo "## PR Validation Report" >> $GITHUB_STEP_SUMMARY
        echo "### Build Status: ✅ Success" >> $GITHUB_STEP_SUMMARY
        echo "### APK Size: $(stat -c%s app/build/outputs/apk/debug/*.apk) bytes" >> $GITHUB_STEP_SUMMARY
        echo "### Tests: $(grep -c 'test' app/build/test-results/testDebugUnitTest/TEST-*.xml || echo 'N/A') passed" >> $GITHUB_STEP_SUMMARY

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Run Lint Check
      run: |
        chmod +x ./gradlew
        ./gradlew lintDebug

    - name: Upload Lint Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lint-results
        path: app/build/reports/lint-results-debug.html

    - name: Comment PR with Results
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const fs = require('fs');
          const path = 'app/build/reports/lint-results-debug.xml';
          
          if (fs.existsSync(path)) {
            const lintResults = fs.readFileSync(path, 'utf8');
            const errorCount = (lintResults.match(/severity="Error"/g) || []).length;
            const warningCount = (lintResults.match(/severity="Warning"/g) || []).length;
            
            const comment = `## 🔍 Code Quality Report
            
            - **Errors**: ${errorCount}
            - **Warnings**: ${warningCount}
            
            ${errorCount > 0 ? '❌ Please fix errors before merging' : '✅ No errors found'}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }
