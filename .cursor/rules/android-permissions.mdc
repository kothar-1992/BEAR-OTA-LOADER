# Android Permissions Guide

## Required Permissions for File Installation

### Manifest Permissions
Add these to your `AndroidManifest.xml`:

```xml
<!-- For Android 8.0+ (API 26+) -->
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES" />

<!-- For Android 6.0+ (API 23+) -->
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />

<!-- For Android 11+ (API 30+) -->
<uses-permission android:name="android.permission.MANAGE_EXTERNAL_STORAGE" />
```

### Runtime Permission Verification

Create a permission utility class:

```java
public class PermissionUtils {
    private static final int REQUEST_INSTALL_PACKAGES = 1001;
    private static final int REQUEST_STORAGE_PERMISSION = 1002;
    
    public static boolean checkInstallPermission(Context context) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            return context.getPackageManager().canRequestPackageInstalls();
        }
        return true;
    }
    
    public static boolean checkStoragePermission(Context context) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            return Environment.isExternalStorageManager();
        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            return ContextCompat.checkSelfPermission(context, 
                Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
        }
        return true;
    }
    
    public static void requestInstallPermission(Activity activity) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            Intent intent = new Intent(Settings.ACTION_MANAGE_UNKNOWN_APP_SOURCES);
            intent.setData(Uri.parse("package:" + activity.getPackageName()));
            activity.startActivityForResult(intent, REQUEST_INSTALL_PACKAGES);
        }
    }
    
    public static void requestStoragePermission(Activity activity) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            Intent intent = new Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION);
            intent.setData(Uri.parse("package:" + activity.getPackageName()));
            activity.startActivity(intent);
        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            ActivityCompat.requestPermissions(activity, 
                new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 
                REQUEST_STORAGE_PERMISSION);
        }
    }
}
```

### Activity Implementation

In your main activity, implement permission checks:

```java
public class MainActivity extends AppCompatActivity {
    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        checkAndRequestPermissions();
    }
    
    private void checkAndRequestPermissions() {
        // Check install permission
        if (!PermissionUtils.checkInstallPermission(this)) {
            showPermissionDialog("Install Permission Required", 
                "This app needs permission to install files. Please grant the permission.");
        }
        
        // Check storage permission
        if (!PermissionUtils.checkStoragePermission(this)) {
            showPermissionDialog("Storage Permission Required", 
                "This app needs access to storage to save files.");
        }
    }
    
    private void showPermissionDialog(String title, String message) {
        new MaterialAlertDialogBuilder(this)
            .setTitle(title)
            .setMessage(message)
            .setPositiveButton("Grant Permission", (dialog, which) -> {
                if (title.contains("Install")) {
                    PermissionUtils.requestInstallPermission(this);
                } else {
                    PermissionUtils.requestStoragePermission(this);
                }
            })
            .setNegativeButton("Cancel", null)
            .show();
    }
    
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == PermissionUtils.REQUEST_INSTALL_PACKAGES) {
            if (PermissionUtils.checkInstallPermission(this)) {
                // Permission granted, proceed with installation
            } else {
                // Permission denied, show error
                showPermissionDeniedDialog();
            }
        }
    }
    
    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == PermissionUtils.REQUEST_STORAGE_PERMISSION) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                // Permission granted
            } else {
                // Permission denied
                showPermissionDeniedDialog();
            }
        }
    }
}
```

## Version-Specific Considerations

### Android 11+ (API 30+)
- Use `MANAGE_EXTERNAL_STORAGE` for full file access
- Implement `ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION` request

### Android 8.0+ (API 26+)
- Use `REQUEST_INSTALL_PACKAGES` for app installation
- Implement `ACTION_MANAGE_UNKNOWN_APP_SOURCES` request

### Android 6.0+ (API 23+)
- Use runtime permissions for storage access
- Implement `requestPermissions()` callbacks

## Common Issues and Solutions

1. **Permission not granted**: Always check permissions before file operations
2. **Unknown sources disabled**: Guide users to enable in Settings
3. **Storage access denied**: Use scoped storage for Android 10+
4. **Installation blocked**: Check if package installer is available

## Testing Checklist

- [ ] Test on Android 6.0 (API 23)
- [ ] Test on Android 8.0 (API 26) 
- [ ] Test on Android 10 (API 29)
- [ ] Test on Android 11+ (API 30+)
- [ ] Verify permission dialogs appear
- [ ] Verify file operations work after permission grant
- [ ] Test permission denial handling
description:
globs:
alwaysApply: false
---
