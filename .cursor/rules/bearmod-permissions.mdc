# BearMod Permission Implementation

## Current Project Structure

The project uses a modular structure with:
- [Plugin/src/main/java/com/bearmod/loader/ui/main/MainActivity.java](mdc:Plugin/src/main/java/com/bearmod/loader/ui/main/MainActivity.java) - Main activity
- [Plugin/src/main/AndroidManifest.xml](mdc:Plugin/src/main/AndroidManifest.xml) - Manifest file

## Required Permission Implementation

### 1. Update AndroidManifest.xml

Add these permissions to your manifest:

```xml
<!-- For Android 8.0+ (API 26+) -->
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES" />

<!-- For Android 6.0+ (API 23+) -->
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />

<!-- For Android 11+ (API 30+) -->
<uses-permission android:name="android.permission.MANAGE_EXTERNAL_STORAGE" />

<!-- For Android 12+ (API 31+) -->
<uses-permission android:name="android.permission.READ_MEDIA_IMAGES" />
<uses-permission android:name="android.permission.READ_MEDIA_VIDEO" />
<uses-permission android:name="android.permission.READ_MEDIA_AUDIO" />
```

### 2. Create PermissionUtils.java

Create a new file: `Plugin/src/main/java/com/bearmod/loader/utils/PermissionUtils.java`

```java
package com.bearmod.loader.utils;

import android.Manifest;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Build;
import android.os.Environment;
import android.provider.Settings;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

public class PermissionUtils {
    private static final int REQUEST_INSTALL_PACKAGES = 1001;
    private static final int REQUEST_STORAGE_PERMISSION = 1002;
    private static final int REQUEST_MANAGE_STORAGE = 1003;
    
    public static boolean checkInstallPermission(Context context) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            return context.getPackageManager().canRequestPackageInstalls();
        }
        return true;
    }
    
    public static boolean checkStoragePermission(Context context) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            return Environment.isExternalStorageManager();
        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            return ContextCompat.checkSelfPermission(context, 
                Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
        }
        return true;
    }
    
    public static void requestInstallPermission(Activity activity) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            try {
                Intent intent = new Intent(Settings.ACTION_MANAGE_UNKNOWN_APP_SOURCES);
                intent.setData(Uri.parse("package:" + activity.getPackageName()));
                activity.startActivityForResult(intent, REQUEST_INSTALL_PACKAGES);
            } catch (Exception e) {
                // Fallback to general settings
                Intent intent = new Intent(Settings.ACTION_MANAGE_UNKNOWN_APP_SOURCES);
                activity.startActivityForResult(intent, REQUEST_INSTALL_PACKAGES);
            }
        }
    }
    
    public static void requestStoragePermission(Activity activity) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            try {
                Intent intent = new Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION);
                intent.setData(Uri.parse("package:" + activity.getPackageName()));
                activity.startActivity(intent);
            } catch (Exception e) {
                // Fallback to general settings
                Intent intent = new Intent(Settings.ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION);
                activity.startActivity(intent);
            }
        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            ActivityCompat.requestPermissions(activity, 
                new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 
                REQUEST_STORAGE_PERMISSION);
        }
    }
    
    public static boolean needsStoragePermission() {
        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.M;
    }
    
    public static boolean needsInstallPermission() {
        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.O;
    }
}
```

### 3. Update MainActivity.java

Modify your MainActivity to include permission checks:

```java
// Add to imports
import com.bearmod.loader.utils.PermissionUtils;
import android.content.pm.PackageManager;
import android.os.Build;

// Add to MainActivity class
private void checkAndRequestPermissions() {
    // Check install permission
    if (PermissionUtils.needsInstallPermission() && !PermissionUtils.checkInstallPermission(this)) {
        showPermissionDialog("Install Permission Required", 
            "BearMod needs permission to install files. Please grant the permission in the next screen.");
    }
    
    // Check storage permission
    if (PermissionUtils.needsStoragePermission() && !PermissionUtils.checkStoragePermission(this)) {
        showPermissionDialog("Storage Permission Required", 
            "BearMod needs access to storage to save files. Please grant the permission.");
    }
}

private void showPermissionDialog(String title, String message) {
    MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(this);
    builder.setTitle(title)
           .setMessage(message)
           .setPositiveButton("Grant Permission", (dialog, which) -> {
               if (title.contains("Install")) {
                   PermissionUtils.requestInstallPermission(this);
               } else {
                   PermissionUtils.requestStoragePermission(this);
               }
           })
           .setNegativeButton("Cancel", null)
           .show();
}

@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
    super.onActivityResult(requestCode, resultCode, data);
    if (requestCode == PermissionUtils.REQUEST_INSTALL_PACKAGES) {
        if (PermissionUtils.checkInstallPermission(this)) {
            // Permission granted, proceed with installation
            Log.d("MainActivity", "Install permission granted");
        } else {
            // Permission denied, show error
            showPermissionDeniedDialog("Install permission was denied. Some features may not work.");
        }
    }
}

@Override
public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
    super.onRequestPermissionsResult(requestCode, permissions, grantResults);
    if (requestCode == PermissionUtils.REQUEST_STORAGE_PERMISSION) {
        if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
            Log.d("MainActivity", "Storage permission granted");
        } else {
            showPermissionDeniedDialog("Storage permission was denied. File operations may not work.");
        }
    }
}

private void showPermissionDeniedDialog(String message) {
    new MaterialAlertDialogBuilder(this)
        .setTitle("Permission Denied")
        .setMessage(message)
        .setPositiveButton("OK", null)
        .show();
}
```

## Integration with Existing Code

### Call permission check in onCreate:

```java
@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    // ... existing code ...
    
    // Add permission check
    checkAndRequestPermissions();
    
    // ... rest of existing code ...
}
```

## Testing on Different Android Versions

1. **Android 6.0 (API 23)**: Test runtime permissions
2. **Android 8.0 (API 26)**: Test install permission request
3. **Android 10 (API 29)**: Test scoped storage
4. **Android 11+ (API 30)**: Test MANAGE_EXTERNAL_STORAGE

## Common Issues

1. **Permission dialog not showing**: Check if permission is already granted
2. **Settings not opening**: Use try-catch with fallback intent
3. **Permission denied**: Handle gracefully with user feedback
4. **File operations failing**: Check permission before file operations

## Best Practices

1. Always check permissions before file operations
2. Provide clear user feedback about permission requirements
3. Handle permission denial gracefully
4. Test on multiple Android versions
5. Use appropriate permission for each Android version
description:
globs:
alwaysApply: false
---
